
class TransactionPool:
    def __init__(self):
        self.trasaction_map = {}

    def set_transaction(self, transaction):
        """
        Set the transaction in the transaction pool
        """
        self.trasaction_map[transaction.id] = transaction

    def existing_transaction(self,address):
        """
        This will find the transaction generated by the transactions in the 
        transaction pool.
        """
        for transaction in self.trasaction_map.values():
            if transaction.input['address'] == address:
                return transaction

    def transaction_data(self):
        """
        Return the transactions from the transaction pool represented in the json serialised form.
        """
        return list(
            map(
                lambda transaction: transaction.to_json(),
                self.trasaction_map.values()
            )
        )
    def clear_blockchain_transactions(self,blockchain):
        """
        This willl delete blokchain recorded transactions from the transaction pool.
        """
        for block in blockchain.chain:
            for transaction in block.data:
                try:
                    del self.trasaction_map[transaction['id']]
                except KeyError:
                    pass

